{"paragraphs":[{"text":"%md\nJika pada artikel sebelumnya, kita menganalisa kesukaan dan ketidaksukaan pengguna terhadap suatu film berdasarkan rating yang diberikan, maka bagian ini kita akan membuat sebuah model yang dapat memberikan rekomendasi film terhadap seorang pengguna. Metode yang digunakan adalah Colaborative Filtering yang disediakan Spark ml, yaitu mencari kesamaan seorang user terhadap sekumpulan orang yang lain yang memiliki kesamaan. Misal di user 1 menyukai film 11, 12, 13, 14 dan user 2 menyukai film 13, 14, 15, 16. Maka diprediksi user 1 juga akan menyukai film 15 dan 16.\nDataset yang akan digunakan adalah data rating dari movielens.","user":"yava","dateUpdated":"2020-05-08T16:34:00-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Jika pada artikel sebelumnya, kita menganalisa kesukaan dan ketidaksukaan pengguna terhadap suatu film berdasarkan rating yang diberikan, maka bagian ini kita akan membuat sebuah model yang dapat memberikan rekomendasi film terhadap seorang pengguna. Metode yang digunakan adalah Colaborative Filtering yang disediakan Spark ml, yaitu mencari kesamaan seorang user terhadap sekumpulan orang yang lain yang memiliki kesamaan. Misal di user 1 menyukai film 11, 12, 13, 14 dan user 2 menyukai film 13, 14, 15, 16. Maka diprediksi user 1 juga akan menyukai film 15 dan 16.<br/>Dataset yang akan digunakan adalah data rating dari movielens.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588966263179_-852957766","id":"20200508-153103_1907374884","dateCreated":"2020-05-08T15:31:03-0400","dateStarted":"2020-05-08T16:34:00-0400","dateFinished":"2020-05-08T16:34:00-0400","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9606"},{"text":"%md\n## Langkah-langkahnya\n\n#1. Load ratings.cvs kedalam Spark Dataframe","user":"yava","dateUpdated":"2020-05-08T16:36:24-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Langkah-langkahnya</h2>\n<p>#1. Load ratings.cvs kedalam Spark Dataframe</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588968639327_-241188490","id":"20200508-161039_186369519","dateCreated":"2020-05-08T16:10:39-0400","dateStarted":"2020-05-08T16:36:24-0400","dateFinished":"2020-05-08T16:36:24-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9607"},{"text":"%spark.pyspark\n\nfrom pyspark.sql.types import *\n\nfile_path = \"hdfs://192.168.56.108/user/yava/dataset/ratings.csv\"\n\n\ndf_schema_ratings = StructType(\n  [StructField('userId', IntegerType()),\n   StructField('movieId', IntegerType()),\n   StructField('rating', DoubleType())]\n)\n\ndf_ratings = spark.read \\\n .option(\"delimiter\", \",\") \\\n .schema(df_schema_ratings) \\\n .option(\"inferSchema\", \"True\") \\\n .option(\"header\", \"True\") \\\n .csv(file_path)","user":"yava","dateUpdated":"2020-05-08T15:33:36-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588966335154_981387027","id":"20200508-153215_1054804694","dateCreated":"2020-05-08T15:32:15-0400","dateStarted":"2020-05-08T15:33:36-0400","dateFinished":"2020-05-08T15:33:38-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9608"},{"text":"%spark.pyspark\n\ndf_ratings.show(5)","user":"yava","dateUpdated":"2020-05-08T15:34:00-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------+------+\n|userId|movieId|rating|\n+------+-------+------+\n|     1|      1|   4.0|\n|     1|      3|   4.0|\n|     1|      6|   4.0|\n|     1|     47|   5.0|\n|     1|     50|   5.0|\n+------+-------+------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1588966416817_-2119599079","id":"20200508-153336_1058992962","dateCreated":"2020-05-08T15:33:36-0400","dateStarted":"2020-05-08T15:34:00-0400","dateFinished":"2020-05-08T15:34:02-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9609"},{"text":"%md\n#2. Pecah menjadi 2 bagian secara acak, yaitu data untuk training dan data untuk pengetesan model","user":"yava","dateUpdated":"2020-05-08T16:12:41-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>#2. Pecah menjadi 2 bagian secara acak, yaitu data untuk training dan data untuk pengetesan model</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588968696596_258396879","id":"20200508-161136_452600520","dateCreated":"2020-05-08T16:11:36-0400","dateStarted":"2020-05-08T16:12:41-0400","dateFinished":"2020-05-08T16:12:41-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9610"},{"text":"%spark.pyspark\n\n(data_train, data_test) = df_ratings.randomSplit([0.8, 0.2])","user":"yava","dateUpdated":"2020-05-08T15:36:30-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588966427389_1898024779","id":"20200508-153347_1316939706","dateCreated":"2020-05-08T15:33:47-0400","dateStarted":"2020-05-08T15:36:30-0400","dateFinished":"2020-05-08T15:36:30-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9611"},{"text":"%spark.pyspark\nprint data_train.count(), data_test.count()","user":"yava","dateUpdated":"2020-05-08T15:37:13-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"80672 20164\n"}]},"apps":[],"jobName":"paragraph_1588966590046_-1573921790","id":"20200508-153630_18764672","dateCreated":"2020-05-08T15:36:30-0400","dateStarted":"2020-05-08T15:37:13-0400","dateFinished":"2020-05-08T15:37:27-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9612"},{"text":"%md\n#3. Buat dan latih model","user":"yava","dateUpdated":"2020-05-08T16:13:33-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>#3. Buat dan latih model</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588968780190_-795251694","id":"20200508-161300_345125946","dateCreated":"2020-05-08T16:13:00-0400","dateStarted":"2020-05-08T16:13:33-0400","dateFinished":"2020-05-08T16:13:33-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9613"},{"text":"%spark.pyspark\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.ml.tuning import TrainValidationSplit, ParamGridBuilder","user":"yava","dateUpdated":"2020-05-08T15:39:05-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588966616000_-1717936628","id":"20200508-153656_861358266","dateCreated":"2020-05-08T15:36:56-0400","dateStarted":"2020-05-08T15:39:05-0400","dateFinished":"2020-05-08T15:39:06-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9614"},{"text":"%spark.pyspark\n\n# Build the recommendation model using ALS on the training data\n# Note we set cold start strategy to 'drop' to ensure we don't get NaN evaluation metrics\nals = ALS(userCol=\"userId\", itemCol=\"movieId\", ratingCol=\"rating\", coldStartStrategy=\"drop\", nonnegative=True)","user":"yava","dateUpdated":"2020-05-08T15:41:04-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588966745165_121827764","id":"20200508-153905_1317205906","dateCreated":"2020-05-08T15:39:05-0400","dateStarted":"2020-05-08T15:41:04-0400","dateFinished":"2020-05-08T15:41:05-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9615"},{"text":"%spark.pyspark\nmodel = als.fit(data_train)","user":"yava","dateUpdated":"2020-05-08T15:42:45-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588966864637_1163201336","id":"20200508-154104_1024251228","dateCreated":"2020-05-08T15:41:04-0400","dateStarted":"2020-05-08T15:42:45-0400","dateFinished":"2020-05-08T15:43:01-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9616"},{"text":"%md\n#4. Evaluasi model menggunaka metode RMSE dengan memakai data test","user":"yava","dateUpdated":"2020-05-08T16:14:46-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>#4. Evaluasi model menggunaka metode RMSE dengan memakai data test</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588968818464_270974454","id":"20200508-161338_2098732088","dateCreated":"2020-05-08T16:13:38-0400","dateStarted":"2020-05-08T16:14:46-0400","dateFinished":"2020-05-08T16:14:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9617"},{"text":"%spark.pyspark\n# Evaluate the model by computing the RMSE on the test data\npredictions = model.transform(data_test)\nevaluator = RegressionEvaluator(metricName=\"rmse\", labelCol=\"rating\",\n                                predictionCol=\"prediction\")\nrmse = evaluator.evaluate(predictions)\nprint(\"Root-mean-square error = \" + str(rmse))","user":"yava","dateUpdated":"2020-05-08T15:45:13-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Root-mean-square error = 0.870088271976\n"}]},"apps":[],"jobName":"paragraph_1588966965596_220341289","id":"20200508-154245_799284745","dateCreated":"2020-05-08T15:42:45-0400","dateStarted":"2020-05-08T15:45:13-0400","dateFinished":"2020-05-08T15:45:55-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9618"},{"text":"%md\n\n#5. Menampilkan contoh hasil prediksi rating seorang pengguna terhadap sebuah film\n","user":"yava","dateUpdated":"2020-05-08T16:22:09-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>#5. Menampilkan contoh hasil prediksi rating seorang pengguna terhadap sebuah film</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588969241351_-414776775","id":"20200508-162041_536191286","dateCreated":"2020-05-08T16:20:41-0400","dateStarted":"2020-05-08T16:22:09-0400","dateFinished":"2020-05-08T16:22:09-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9619"},{"text":"%spark.pyspark\npredictions.sort(\"userId\", \"rating\").show(5)","user":"yava","dateUpdated":"2020-05-08T15:46:46-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------+------+----------+\n|userId|movieId|rating|prediction|\n+------+-------+------+----------+\n|     1|   2093|   3.0|  4.060593|\n|     1|   2414|   3.0| 4.0846653|\n|     1|   1377|   3.0| 3.2678232|\n|     1|   1580|   3.0| 4.2530365|\n|     1|    500|   3.0| 4.3135204|\n+------+-------+------+----------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1588967113040_1110205647","id":"20200508-154513_780873325","dateCreated":"2020-05-08T15:45:13-0400","dateStarted":"2020-05-08T15:46:46-0400","dateFinished":"2020-05-08T15:47:11-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9620"},{"text":"%md\n#6. Dengan memasukkan nilai dari userId maka model akan memberikan rekomendasi 10 film yang diprediksi disukai oleh user tersebut ","user":"yava","dateUpdated":"2020-05-08T16:26:11-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>#6. Dengan memasukkan nilai dari userId maka model akan memberikan rekomendasi 10 film yang diprediksi disukai oleh user tersebut</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588968901235_1885610898","id":"20200508-161501_1320222177","dateCreated":"2020-05-08T16:15:01-0400","dateStarted":"2020-05-08T16:26:11-0400","dateFinished":"2020-05-08T16:26:11-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9621"},{"text":"%spark.pyspark\n# UDF function for mapping result\nzip_ = udf(\n    lambda x, y: list(zip(x, y)),\n    ArrayType(StructType([\n      StructField(\"movieId\", IntegerType()),\n      StructField(\"rating\", DoubleType())\n    ]))\n)","user":"yava","dateUpdated":"2020-05-08T15:54:32-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588967660243_-259190511","id":"20200508-155420_16163650","dateCreated":"2020-05-08T15:54:20-0400","dateStarted":"2020-05-08T15:54:32-0400","dateFinished":"2020-05-08T15:54:32-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9622"},{"text":"%spark.pyspark\n# Recommendation for specific user\ndef get_movie_for_user(recs, userId):\n    result = recs.filter(recs[\"userId\"]==userId)\n    result = result.select(\"userId\", \"recommendations.movieId\", \"recommendations.rating\") \\\n        .withColumn(\"tmp\", explode(zip_(\"movieId\", \"rating\"))) \\\n        .select(\"userId\", \"tmp.movieId\", \"tmp.rating\")\n    return result","user":"yava","dateUpdated":"2020-05-08T15:55:26-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588967503659_-1666978923","id":"20200508-155143_1702618745","dateCreated":"2020-05-08T15:51:43-0400","dateStarted":"2020-05-08T15:55:26-0400","dateFinished":"2020-05-08T15:55:26-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9623"},{"text":"%spark.pyspark\n# Recommendation for all user (matrix R)\nuser_recommendation = model.recommendForAllUsers(10)","user":"yava","dateUpdated":"2020-05-08T15:51:43-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588967206660_220684948","id":"20200508-154646_322411365","dateCreated":"2020-05-08T15:46:46-0400","dateStarted":"2020-05-08T15:51:43-0400","dateFinished":"2020-05-08T15:51:44-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9624"},{"text":"%spark.pyspark\n\nuser_movie = get_movie_for_user(user_recommendation, 210)\nuser_movie.show()","user":"yava","dateUpdated":"2020-05-08T16:24:42-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------+-----------------+\n|userId|movieId|           rating|\n+------+-------+-----------------+\n|   210|  67618|5.517250061035156|\n|   210|   5075|5.149378776550293|\n|   210|  74282| 5.10695743560791|\n|   210|  32892|5.061644554138184|\n|   210| 166568|5.050296783447266|\n|   210|   7121|4.992375373840332|\n|   210|  26171| 4.99179744720459|\n|   210|  65188|4.972536563873291|\n|   210|  41724|4.965524673461914|\n|   210|  69394|4.965524673461914|\n+------+-------+-----------------+\n\n"}]},"apps":[],"jobName":"paragraph_1588967561843_-920896760","id":"20200508-155241_1599430759","dateCreated":"2020-05-08T15:52:41-0400","dateStarted":"2020-05-08T16:24:42-0400","dateFinished":"2020-05-08T16:25:01-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9625"},{"text":"%md\n\n#7. Menampilkan judul film yang direkomendasikan\n","user":"yava","dateUpdated":"2020-05-08T16:27:07-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionSupport":false,"completionKey":"TAB"},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>#7. Menampilkan judul film yang direkomendasikan</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1588969550815_788182132","id":"20200508-162550_213162482","dateCreated":"2020-05-08T16:25:50-0400","dateStarted":"2020-05-08T16:27:07-0400","dateFinished":"2020-05-08T16:27:07-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9626"},{"text":"%spark.pyspark\nfile_path = \"hdfs://192.168.56.108/user/yava/dataset/movies.csv\"\n\ndf_schema_movies = StructType(\n  [StructField('movie_id', IntegerType()),\n   StructField('title', StringType()),\n   StructField('genres', StringType())]\n)\n\ndf_movies = spark.read \\\n .option(\"delimiter\", \",\") \\\n .schema(df_schema_movies) \\\n .option(\"inferSchema\", \"True\") \\\n .option(\"header\", \"True\") \\\n .csv(file_path)","user":"yava","dateUpdated":"2020-05-08T16:30:26-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1588967612204_1408016754","id":"20200508-155332_1510619752","dateCreated":"2020-05-08T15:53:32-0400","dateStarted":"2020-05-08T16:30:26-0400","dateFinished":"2020-05-08T16:30:26-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9627"},{"text":"%spark.pyspark\ndf_user_movie_name = user_movie.join(df_movies, user_movie.movieId == df_movies.movie_id)\\\n            .select(\"userId\", \"movieId\", \"title\", \"genres\")\n\ndf_user_movie_name.show(truncate=False)","user":"yava","dateUpdated":"2020-05-08T16:31:33-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------+------------------------------------------------------------------+----------------------+\n|userId|movieId|title                                                             |genres                |\n+------+-------+------------------------------------------------------------------+----------------------+\n|210   |67618  |Strictly Sexual (2008)                                            |Comedy|Drama|Romance  |\n|210   |5075   |Waydowntown (2000)                                                |Comedy                |\n|210   |74282  |Anne of Green Gables: The Sequel (a.k.a. Anne of Avonlea) (1987)  |Children|Drama|Romance|\n|210   |32892  |Ivan's Childhood (a.k.a. My Name is Ivan) (Ivanovo detstvo) (1962)|Drama|War             |\n|210   |166568 |Miss Sloane (2016)                                                |Thriller              |\n|210   |7121   |Adam's Rib (1949)                                                 |Comedy|Romance        |\n|210   |26171  |Play Time (a.k.a. Playtime) (1967)                                |Comedy                |\n|210   |65188  |Dear Zachary: A Letter to a Son About His Father (2008)           |Documentary           |\n|210   |41724  |Wal-Mart: The High Cost of Low Price (2005)                       |Documentary           |\n|210   |69394  |Stoning of Soraya M., The (2008)                                  |Crime|Drama           |\n+------+-------+------------------------------------------------------------------+----------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1588969633678_-855950381","id":"20200508-162713_745545250","dateCreated":"2020-05-08T16:27:13-0400","dateStarted":"2020-05-08T16:31:33-0400","dateFinished":"2020-05-08T16:31:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:9628"},{"text":"%spark.pyspark\n","user":"yava","dateUpdated":"2020-05-08T16:28:53-0400","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionSupport":true,"completionKey":"TAB"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1588969733400_-922335743","id":"20200508-162853_2130068194","dateCreated":"2020-05-08T16:28:53-0400","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:9629"}],"name":"5. Movie Recomendation System","id":"2F75RQW8J","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"hive:yava:":[],"sh:yava:":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}